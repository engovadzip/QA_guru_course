{"name": "test_hw10", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 119\nCurrent browser version is 118.0.5993.120 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00F572A3+45731]\n\t(No symbol) [0x00EE2D51]\n\t(No symbol) [0x00DD880D]\n\t(No symbol) [0x00E01281]\n\t(No symbol) [0x00E00A9A]\n\t(No symbol) [0x00DFD3C2]\n\t(No symbol) [0x00DFA310]\n\t(No symbol) [0x00E2EB26]\n\t(No symbol) [0x00E2E6BC]\n\t(No symbol) [0x00E27DD6]\n\t(No symbol) [0x00E031F6]\n\t(No symbol) [0x00E0439D]\n\tGetHandleVerifier [0x01260716+3229462]\n\tGetHandleVerifier [0x012A84C8+3523784]\n\tGetHandleVerifier [0x012A214C+3498316]\n\tGetHandleVerifier [0x00FE1680+611968]\n\t(No symbol) [0x00EECCCC]\n\t(No symbol) [0x00EE8DF8]\n\t(No symbol) [0x00EE8F1D]\n\t(No symbol) [0x00EDB2C7]\n\tBaseThreadInitThunk [0x76DCFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77647C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77647C3E+238]", "trace": "@allure.step(\"Проверка формы регистрации\")\n    def test_hw10():\n        registration_page = RegistrationPage()\n    \n>       registration_page.open_form()\n\ntest_hw10_mid.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\registration_page_mid.py:7: in open_form\n    browser.open('/automation-practice-form')\n..\\..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:1155: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n..\\..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:301: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n..\\..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:216: in get\n    driver = config.driver\n..\\..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:343: in __get__\n    driver = config.build_driver_strategy(config)\n..\\..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:171: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n..\\..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:93: in install_and_build_chrome\n    return Chrome(\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:205: in __init__\n    self.start_session(capabilities)\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027A81709C50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77647C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77647C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 119\nE       Current browser version is 118.0.5993.120 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00F572A3+45731]\nE       \t(No symbol) [0x00EE2D51]\nE       \t(No symbol) [0x00DD880D]\nE       \t(No symbol) [0x00E01281]\nE       \t(No symbol) [0x00E00A9A]\nE       \t(No symbol) [0x00DFD3C2]\nE       \t(No symbol) [0x00DFA310]\nE       \t(No symbol) [0x00E2EB26]\nE       \t(No symbol) [0x00E2E6BC]\nE       \t(No symbol) [0x00E27DD6]\nE       \t(No symbol) [0x00E031F6]\nE       \t(No symbol) [0x00E0439D]\nE       \tGetHandleVerifier [0x01260716+3229462]\nE       \tGetHandleVerifier [0x012A84C8+3523784]\nE       \tGetHandleVerifier [0x012A214C+3498316]\nE       \tGetHandleVerifier [0x00FE1680+611968]\nE       \t(No symbol) [0x00EECCCC]\nE       \t(No symbol) [0x00EE8DF8]\nE       \t(No symbol) [0x00EE8F1D]\nE       \t(No symbol) [0x00EDB2C7]\nE       \tBaseThreadInitThunk [0x76DCFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77647C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77647C3E+238]\n\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "steps": [{"name": "Проверка формы регистрации", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 119\nCurrent browser version is 118.0.5993.120 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00F572A3+45731]\n\t(No symbol) [0x00EE2D51]\n\t(No symbol) [0x00DD880D]\n\t(No symbol) [0x00E01281]\n\t(No symbol) [0x00E00A9A]\n\t(No symbol) [0x00DFD3C2]\n\t(No symbol) [0x00DFA310]\n\t(No symbol) [0x00E2EB26]\n\t(No symbol) [0x00E2E6BC]\n\t(No symbol) [0x00E27DD6]\n\t(No symbol) [0x00E031F6]\n\t(No symbol) [0x00E0439D]\n\tGetHandleVerifier [0x01260716+3229462]\n\tGetHandleVerifier [0x012A84C8+3523784]\n\tGetHandleVerifier [0x012A214C+3498316]\n\tGetHandleVerifier [0x00FE1680+611968]\n\t(No symbol) [0x00EECCCC]\n\t(No symbol) [0x00EE8DF8]\n\t(No symbol) [0x00EE8F1D]\n\t(No symbol) [0x00EDB2C7]\n\tBaseThreadInitThunk [0x76DCFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77647C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77647C3E+238]\n\n", "trace": "  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\Homework_10\\tests\\test_hw10_mid.py\", line 11, in test_hw10\n    registration_page.open_form()\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\Homework_10\\pages\\registration_page_mid.py\", line 7, in open_form\n    browser.open('/automation-practice-form')\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 1155, in open\n    self.config._executor.get_url(relative_or_absolute_url)\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 301, in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 216, in get\n    driver = config.driver\n             ^^^^^^^^^^^^^\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 343, in __get__\n    driver = config.build_driver_strategy(config)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 171, in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n           ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 93, in install_and_build_chrome\n    return Chrome(\n           ^^^^^^^\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py\", line 56, in __init__\n    super().__init__(\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 205, in __init__\n    self.start_session(capabilities)\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 289, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\abzxc\\Desktop\\QA_guru_course\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1698870425675, "stop": 1698870430417}], "attachments": [{"name": "stderr", "source": "53138d48-bb7a-4bac-a24b-adf1989a4f53-attachment.txt", "type": "text/plain"}], "start": 1698870425674, "stop": 1698870430422, "uuid": "5fb59727-5884-4943-806d-1d3ea827ea95", "historyId": "38972116c3ca18be82e652cd59fc9c3e", "testCaseId": "38972116c3ca18be82e652cd59fc9c3e", "fullName": "tests.test_hw10_mid#test_hw10", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_hw10_mid"}, {"name": "host", "value": "DESKTOP-A46PKE9"}, {"name": "thread", "value": "9984-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_hw10_mid"}]}